Making requests:
In order to fetch content from an arbitrary URL, just pass the URL to fetch:
fetch('https://mywebsite.com/mydata.json');

----------------------------------------------
Fetch also takes an optional second argument that allows you to customize the HTTP request. You may want to specify 
additional headers, or make a POST request:

fetch('https://mywebsite.com/endpoint/', {
  method: 'POST',
  headers: {
    Accept: 'application/json',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    firstParam: 'yourValue',
    secondParam: 'yourOtherValue',
  }),
});

Note:By default, iOS will block any request that's not encrypted using SSL. If you need to fetch from a cleartext URL 
(one that begins with http) you will first need to add an App Transport Security exception. If you know ahead of time what 
domains you will need access to, it is more secure to add exceptions just for those domains; if the domains are not known
until runtime you can disable ATS completely.

Note however that from January 2017, Apple's App Store review will require reasonable justification for disabling ATS. 
See Apple's documentation for more information.
--------------------------------------------------------------
2)Using XMLHttpRequest
var request = new XMLHttpRequest();
request.onreadystatechange = (e) => {
  if (request.readyState !== 4) {
    return;
  }

  if (request.status === 200) {
    console.log('success', request.responseText);
  } else {
    console.warn('error');
  }
};

request.open('GET', 'https://mywebsite.com/endpoint/');
request.send();
